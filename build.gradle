/*
 * Copyright 2014-2020 Netflix, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

plugins {
    id 'com.netflix.nebula.plugin-plugin' version '20.8.0'
}

description 'Gradle plugin to ease use of ivy-publish and maven-publish'
group = 'com.netflix.nebula'

compileGroovy.groovyOptions.configurationScript = file('src/groovyCompile/groovycConfig.groovy')

contacts {
    'nebula-plugins-oss@netflix.com' {
        moniker 'Nebula Plugins Maintainers'
        github 'nebula-plugins'
    }
}

// Write the plugin's classpath to a file to share with the tests
task createClasspathManifest {
    def outputDir = file("$buildDir/$name")

    inputs.files sourceSets.main.runtimeClasspath
    outputs.dir outputDir

    doLast {
        outputDir.mkdirs()
        file("$outputDir/plugin-classpath.txt").text = sourceSets.main.runtimeClasspath.join("\n")
    }
}

dependencies {
    implementation 'com.netflix.nebula:gradle-info-plugin:latest.release'
    implementation 'com.netflix.nebula:gradle-contacts-plugin:latest.release'
    implementation 'com.netflix.nebula:nebula-gradle-interop:latest.release'

    testImplementation enforcedPlatform("com.fasterxml.jackson:jackson-bom:2.9.10.+")

    testImplementation gradleTestKit()
    testImplementation 'com.netflix.nebula:gradle-dependency-lock-plugin:latest.release'
    testImplementation 'com.netflix.nebula:gradle-resolution-rules-plugin:latest.release'
    testImplementation 'com.netflix.nebula:nebula-dependency-recommender:latest.release'
    testImplementation('org.jfrog.buildinfo:build-info-extractor-gradle:latest.release') {
        exclude group: 'org.codehaus.groovy', module: 'groovy-all'
    }
    testRuntimeOnly files(tasks.createClasspathManifest)
}

gradlePlugin {
    plugins {
        mavenApacheLicense {
            id = 'com.netflix.nebula.maven-apache-license'
            displayName = 'com.netflix.nebula.maven-apache-license'
            description = 'Plugins to ease maven-publish and ivy-publish configuration'
            implementationClass = 'nebula.plugin.publishing.maven.license.MavenApacheLicensePlugin'
            tags.set(['nebula', 'publish', 'maven', 'apache', 'license'])
        }

        mavenBasePublish {
            id = 'com.netflix.nebula.maven-base-publish'
            displayName = 'com.netflix.nebula.maven-base-publish'
            description = 'Plugins to ease maven-publish and ivy-publish configuration'
            implementationClass = 'nebula.plugin.publishing.maven.MavenBasePublishPlugin'
            tags.set(['nebula', 'publish', 'maven'])
        }

        mavenDeveloper {
            id = 'com.netflix.nebula.maven-developer'
            displayName = 'com.netflix.nebula.maven-developer'
            description = 'Plugins to ease maven-publish and ivy-publish configuration'
            implementationClass = 'nebula.plugin.publishing.maven.MavenDeveloperPlugin'
            tags.set(['nebula', 'publish', 'maven'])
        }

        mavenManifest {
            id = 'com.netflix.nebula.maven-manifest'
            displayName = 'com.netflix.nebula.maven-manifest'
            description = 'Plugins to ease maven-publish and ivy-publish configuration'
            implementationClass = 'nebula.plugin.publishing.maven.MavenManifestPlugin'
            tags.set(['nebula', 'publish', 'maven'])
        }

        mavenNebulaPublish {
            id = 'com.netflix.nebula.maven-nebula-publish'
            displayName = 'com.netflix.nebula.maven-nebula-publish'
            description = 'Plugins to ease maven-publish and ivy-publish configuration'
            implementationClass = 'nebula.plugin.publishing.maven.MavenNebulaPublishPlugin'
            tags.set(['nebula', 'publish', 'maven'])
        }

        mavenPublish {
            id = 'com.netflix.nebula.maven-publish'
            displayName = 'com.netflix.nebula.maven-publish'
            description = 'Plugins to ease maven-publish and ivy-publish configuration'
            implementationClass = 'nebula.plugin.publishing.maven.MavenPublishPlugin'
            tags.set(['nebula', 'publish', 'maven'])
        }

        mavenShadowPublish {
            id = 'com.netflix.nebula.maven-shadow-publish'
            displayName = 'com.netflix.nebula.maven-shadow-publish'
            description = 'Plugins to ease maven-publish and ivy-publish configuration'
            implementationClass = 'nebula.plugin.publishing.maven.MavenShadowPublishPlugin'
            tags.set(['nebula', 'publish', 'maven', 'shadow'])
        }

        mavenResolvedDependencies {
            id = 'com.netflix.nebula.maven-resolved-dependencies'
            displayName = 'com.netflix.nebula.maven-resolved-dependencies'
            description = 'Plugins to ease maven-publish and ivy-publish configuration'
            implementationClass = 'nebula.plugin.publishing.maven.MavenResolvedDependenciesPlugin'
            tags.set(['nebula', 'publish', 'maven'])
        }

        mavenVerifyUnspecifiedVersionDependencies {
            id = 'com.netflix.nebula.maven-verify-unspecified-version-dependencies'
            displayName = 'com.netflix.nebula.maven-verify-unspecified-version-dependencies'
            description = 'Plugins to ease maven-publish and ivy-publish configuration'
            implementationClass = 'nebula.plugin.publishing.maven.MavenVerifyUnspecifiedVersionDependenciesPlugin'
            tags.set(['nebula', 'publish', 'maven'])
        }

        mavenRemoveInvalidDependencies {
            id = 'com.netflix.nebula.maven-remove-invalid-dependencies'
            displayName = 'com.netflix.nebula.maven-remove-invalid-dependencies'
            description = 'Plugins to ease maven-publish and ivy-publish configuration'
            implementationClass = 'nebula.plugin.publishing.maven.MavenRemoveInvalidDependenciesPlugin'
            tags.set(['nebula', 'publish', 'maven'])
        }

        ivyRemoveInvalidDependencies {
            id = 'com.netflix.nebula.ivy-remove-invalid-dependencies'
            displayName = 'com.netflix.nebula.ivy-remove-invalid-dependencies'
            description = 'Plugins to ease maven-publish and ivy-publish configuration'
            implementationClass = 'nebula.plugin.publishing.ivy.IvyRemoveInvalidDependenciesPlugin'
            tags.set(['nebula', 'publish', 'ivy'])
        }


        mavenScm {
            id = 'com.netflix.nebula.maven-scm'
            displayName = 'com.netflix.nebula.maven-scm'
            description = 'Plugins to ease maven-publish and ivy-publish configuration'
            implementationClass = 'nebula.plugin.publishing.maven.MavenScmPlugin'
            tags.set(['nebula', 'publish', 'maven'])
        }

        ivyBasePublish {
            id = 'com.netflix.nebula.ivy-base-publish'
            displayName = 'com.netflix.nebula.ivy-base-publish'
            description = 'Plugins to ease maven-publish and ivy-publish configuration'
            implementationClass = 'nebula.plugin.publishing.ivy.IvyBasePublishPlugin'
            tags.set(['nebula', 'publish', 'ivy'])
        }

        ivyManifest {
            id = 'com.netflix.nebula.ivy-manifest'
            displayName = 'com.netflix.nebula.ivy-manifest'
            description = 'Plugins to ease maven-publish and ivy-publish configuration'
            implementationClass = 'nebula.plugin.publishing.ivy.IvyManifestPlugin'
            tags.set(['nebula', 'publish', 'ivy'])
        }

        ivyNebulaPublish {
            id = 'com.netflix.nebula.ivy-nebula-publish'
            displayName = 'com.netflix.nebula.ivy-nebula-publish'
            description = 'Plugins to ease maven-publish and ivy-publish configuration'
            implementationClass = 'nebula.plugin.publishing.ivy.IvyNebulaPublishPlugin'
            tags.set(['nebula', 'publish', 'ivy'])
        }

        ivyPublish {
            id = 'com.netflix.nebula.ivy-publish'
            displayName = 'com.netflix.nebula.ivy-publish'
            description = 'Plugins to ease maven-publish and ivy-publish configuration'
            implementationClass = 'nebula.plugin.publishing.ivy.IvyPublishPlugin'
            tags.set(['nebula', 'publish', 'ivy'])
        }

        ivyShadowPublish {
            id = 'com.netflix.nebula.ivy-shadow-publish'
            displayName = 'com.netflix.nebula.ivy-shadow-publish'
            description = 'Plugins to ease maven-publish and ivy-publish configuration'
            implementationClass = 'nebula.plugin.publishing.ivy.IvyShadowPublishPlugin'
            tags.set(['nebula', 'publish', 'ivy', 'shadow'])
        }

        ivyResolvedDependencies {
            id = 'com.netflix.nebula.ivy-resolved-dependencies'
            displayName = 'com.netflix.nebula.ivy-resolved-dependencies'
            description = 'Plugins to ease maven-publish and ivy-publish configuration'
            implementationClass = 'nebula.plugin.publishing.ivy.IvyResolvedDependenciesPlugin'
            tags.set(['nebula', 'publish', 'ivy'])
        }

        ivyVerifyUnspecifiedVersionDependencies {
            id = 'com.netflix.nebula.ivy-verify-unspecified-version-dependencies'
            displayName = 'com.netflix.nebula.ivy-verify-unspecified-version-dependencies'
            description = 'Plugins to ease maven-publish and ivy-publish configuration'
            implementationClass = 'nebula.plugin.publishing.ivy.IvyVerifyUnspecifiedVersionDependenciesPlugin'
            tags.set(['nebula', 'publish', 'ivy'])
        }

        ivyCompileOnly {
            id = 'com.netflix.nebula.ivy-compile-only'
            displayName = 'com.netflix.nebula.ivy-compile-only'
            description = 'Plugins to ease maven-publish and ivy-publish configuration'
            implementationClass = 'nebula.plugin.publishing.ivy.IvyCompileOnlyPlugin'
            tags.set(['nebula', 'publish', 'ivy'])
        }

        publishVerification {
            id = 'com.netflix.nebula.publish-verification'
            displayName = 'com.netflix.nebula.publish-verification'
            description = 'Plugins to ease maven-publish and ivy-publish configuration'
            implementationClass = 'nebula.plugin.publishing.verification.PublishVerificationPlugin'
            tags.set(['nebula', 'publish'])
        }

        javadocJar {
            id = 'com.netflix.nebula.javadoc-jar'
            displayName = 'com.netflix.nebula.javadoc-jar'
            description = 'Plugins to ease maven-publish and ivy-publish configuration'
            implementationClass = 'nebula.plugin.publishing.publications.JavadocJarPlugin'
            tags.set(['nebula', 'publish', 'javadoc'])
        }

        sourceJar {
            id = 'com.netflix.nebula.source-jar'
            displayName = 'com.netflix.nebula.source-jar'
            description = 'Plugins to ease maven-publish and ivy-publish configuration'
            implementationClass = 'nebula.plugin.publishing.publications.SourceJarPlugin'
            tags.set(['nebula', 'publish', 'source'])
        }

        springBootJar {
            id = 'com.netflix.nebula.spring-boot-jar'
            displayName = 'com.netflix.nebula.spring-boot-jar'
            description = 'Plugins to ease maven-publish and ivy-publish configuration'
            implementationClass = 'nebula.plugin.publishing.publications.SpringBootJarPlugin'
            tags.set(['nebula', 'publish', 'spring-boot'])
        }

        testJar {
            id = 'com.netflix.nebula.test-jar'
            displayName = 'com.netflix.nebula.test-jar'
            description = 'Plugins to ease maven-publish and ivy-publish configuration'
            implementationClass = 'nebula.plugin.publishing.publications.TestJarPlugin'
            tags.set(['nebula', 'publish', 'test-jar'])
        }
    }
}


tasks.withType(Test).configureEach {
    maxParallelForks = Runtime.runtime.availableProcessors().intdiv(2) ?: 1
}
